// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WikiLoginDemo.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WikiLoginFeature : Xunit.IClassFixture<WikiLoginFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "WikiLogin.feature"
#line hidden
        
        public WikiLoginFeature(WikiLoginFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WikiLogin", "\tIn order to access Wikipedia features\r\n\tAs a member of the internet community\r\n\t" +
                    "I want to be able to log into Wikipedia", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Log into Wikipedia")]
        [Xunit.TraitAttribute("FeatureTitle", "WikiLogin")]
        [Xunit.TraitAttribute("Description", "Log into Wikipedia")]
        [Xunit.TraitAttribute("Category", "owner:me")]
        [Xunit.TraitAttribute("Category", "critical")]
        [Xunit.TraitAttribute("Category", "issue:WIK-1")]
        [Xunit.TraitAttribute("Category", "tms:https://jira.example.org/browse/WIK-1")]
        [Xunit.TraitAttribute("Category", "positive")]
        public virtual void LogIntoWikipedia()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Log into Wikipedia", null, new string[] {
                        "owner:me",
                        "critical",
                        "issue:WIK-1",
                        "tms:https://jira.example.org/browse/WIK-1",
                        "positive"});
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 testRunner.Given("The user that exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("Wikipedia login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("The user enters provided credentials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.And("The user clicks login button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.Then("The user should be logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Check validation of empty fields")]
        [Xunit.TraitAttribute("FeatureTitle", "WikiLogin")]
        [Xunit.TraitAttribute("Description", "Check validation of empty fields")]
        [Xunit.TraitAttribute("Category", "owner:me")]
        [Xunit.TraitAttribute("Category", "critical")]
        [Xunit.TraitAttribute("Category", "issue:WIK-1")]
        [Xunit.TraitAttribute("Category", "tms:https://jira.example.org/browse/WIK-1")]
        [Xunit.TraitAttribute("Category", "positive")]
        [Xunit.InlineDataAttribute("password", "username", new string[0])]
        [Xunit.InlineDataAttribute("username", "password", new string[0])]
        public virtual void CheckValidationOfEmptyFields(string enterField, string validField, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "owner:me",
                    "critical",
                    "issue:WIK-1",
                    "tms:https://jira.example.org/browse/WIK-1",
                    "positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check validation of empty fields", null, @__tags);
#line 15
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 16
 testRunner.Given("The user that exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
 testRunner.And("Wikipedia login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.When(string.Format("The user enters \"nothing\" in \"{0}\" field", enterField), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.And("The user clicks login button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.Then("The user should not be logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
 testRunner.And(string.Format("Validation message for \"{0}\" should appear", validField), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Try to log into Wikipedia")]
        [Xunit.TraitAttribute("FeatureTitle", "WikiLogin")]
        [Xunit.TraitAttribute("Description", "Try to log into Wikipedia")]
        [Xunit.TraitAttribute("Category", "owner:me")]
        [Xunit.TraitAttribute("Category", "critical")]
        [Xunit.TraitAttribute("Category", "issue:WIK-1")]
        [Xunit.TraitAttribute("Category", "tms:https://jira.example.org/browse/WIK-1")]
        [Xunit.TraitAttribute("Category", "negative")]
        [Xunit.InlineDataAttribute("abcdef", "alhjfdb", new string[0])]
        [Xunit.InlineDataAttribute("ąśćźżł", "%$EF4", new string[0])]
        [Xunit.InlineDataAttribute("_$^*()", "5467", new string[0])]
        public virtual void TryToLogIntoWikipedia(string username, string password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "owner:me",
                    "critical",
                    "issue:WIK-1",
                    "tms:https://jira.example.org/browse/WIK-1",
                    "negative"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to log into Wikipedia", null, @__tags);
#line 30
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 31
 testRunner.Given("Wikipedia login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.When(string.Format("The user enters \"{0}\" in \"username\" field", username), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.And(string.Format("The user enters \"{0}\" in \"password\" field", password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("The user clicks login button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.Then("The user should not be logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 36
 testRunner.And("Validation message for incorrect credentials should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WikiLoginFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WikiLoginFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

